<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

    <mvc:annotation-driven />
    <context:annotation-config />

    <!-- 设置扫描使用注解的类所在的包 -->
    <!-- 设置扫描使用注解的类所在的包 -->
    <context:component-scan base-package="com.aofei.**.controller, com.aofei.**.router,com.aofei.kettle.**"/>
    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->

    <!-- 配置默认的访问页面 -->
    <mvc:view-controller path="/" view-name="redirect:/swagger-ui.html"/> <!--表示当访问主页时自动转发到index控制器-->

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>

    <!-- 加载配置文件数据 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:config/redis.properties</value>
                <value>classpath*:config/token.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!-- 国际化信息所在的文件名 -->
        <property name="basenames" >
            <list>
                <value>i18n/messages/messages</value>

            </list>
        </property>
        <!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->
        <property name="useCodeAsDefaultMessage" value="true" />
    </bean>
    <!-- 动态切换国际化 ,国际化放在session中 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
    <mvc:interceptors>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <!-- 通过这个参数来决定获取那个配置文件 -->
            <property name="paramName" value="lang" />
        </bean>
    </mvc:interceptors>

    <!--解决fastJson 转换long型，精度丢失的问题-->
    <bean id="fastJsonConfigExt" class="com.aofei.admin.config.FastJsonConfigExt"/>
    <!-- 自定义JSON转换器 -->
    <mvc:annotation-driven>
        <mvc:message-converters>

            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="fastJsonConfig" ref="fastJsonConfigExt" />
                <property name="supportedMediaTypes" value="application/json;text/plain;charset=UTF-8"/>
                <property name="features">
                    <array>
                        <value>WriteMapNullValue</value>
                        <value>WriteNullStringAsEmpty</value>
                        <value>DisableCircularReferenceDetect</value>
                    </array>
                </property>
            </bean>

        </mvc:message-converters>



        <mvc:argument-resolvers>
            <!--配置注入登录用户的解析器-->
            <bean id="currentUserMethodArgumentResolver"
                  class="com.aofei.authorization.resolvers.CurrentUserMethodArgumentResolver">
                <!--需要解析的用户类-->
                <property name="userModelClass" value="com.aofei.base.model.response.CurrentUserResponse"/>
                <!--查询用户的bean-->
                <property name="userModelRepository" ref="userRepository"/>
            </bean>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>


    <!-- 自定义异常处理 -->
    <bean id="handlerExceptionResolver" class="com.aofei.base.exception.AnnotationHandlerMethodExceptionResolver">
        <property name="defaultErrorView" value="/error/500"/>
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                    <property name="supportedMediaTypes" value="application/json;text/plain;charset=UTF-8"/>
                    <property name="features">
                        <array>
                            <value>WriteMapNullValue</value>
                            <value>WriteNullStringAsEmpty</value>
                            <value>DisableCircularReferenceDetect</value>
                        </array>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--授权认证配置 begin-->

    <!--通过Key获得对应用户的bean-->
    <bean id="userRepository" class="com.aofei.admin.authorization.resolver.UserRepository"/>
    <!-- <mvc:annotation-driven>
         <mvc:argument-resolvers>
             &lt;!&ndash;配置注入登录用户的解析器&ndash;&gt;
             <bean id="currentUserMethodArgumentResolver"
                   class="com.aofei.authorization.resolvers.CurrentUserMethodArgumentResolver">
                 &lt;!&ndash;需要解析的用户类&ndash;&gt;
                 <property name="userModelClass" value="com.aofei.system.model.response.UserResponse"/>
                 &lt;!&ndash;查询用户的bean&ndash;&gt;
                 <property name="userModelRepository" ref="userRepository"/>
             </bean>
         </mvc:argument-resolvers>
     </mvc:annotation-driven>-->


    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!--身份验证的拦截器-->
            <bean id="authorizationInterceptor" class="com.aofei.authorization.interceptor.AuthorizationInterceptor">
                <!--验证信息存储的Http头-->
                <property name="httpHeaderName" value="Authorization"/>
                <!--验证信息通用前缀，例如Bearer-->
                <property name="httpHeaderPrefix" value=""/>
                <!--验证失败时的错误信息-->
                <property name="unauthorizedErrorMessage" value="invalid&#x0020;token"/>
                <!--管理验证信息的bean-->
                <property name="manager" ref="tokenManager"/>
                <!--token验证器-->
                <property name="validator" ref="tokenValidator"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--管理验证信息的bean-->
    <bean id="tokenValidator" class="com.aofei.admin.authorization.jwt.JwtTokenValidator"></bean>

    <!--Redis配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大连接数-->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大空闲连接数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--初始化连接数-->
        <property name="minIdle" value="${redis.minIdle}"/>
        <!--最大等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--对拿到的connection进行validateObject校验-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在进行returnObject对返回的connection进行validateObject校验-->
        <property name="testOnReturn" value="${redis.testOnReturn}" />
        <!--定时对线程池中空闲的链接进行validateObject校验-->
        <property name="testWhileIdle" value="true" />
    </bean>

    <!--Redis连接池-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}" type="int"/>
        <constructor-arg index="3" value="${redis.timeout}" type="int"/>
        <constructor-arg index="4" value="${redis.password}"/>
    </bean>

    <!--管理验证信息的bean-->
    <bean id="tokenManager" class="com.aofei.authorization.manager.impl.RedisTokenManager">
        <!--Redis客户端连接池配置-->
        <property name="jedisPool" ref="jedisPool"/>
        <!--Token失效时间-->
        <property name="tokenExpireSeconds" value="${token.expire.seconds}"/>
        <!--一个用户是否可以绑定多个Token-->
        <property name="singleTokenWithUser" value="${single.token.with.user}"/>
        <!--在每次有效操作后刷新过期时间-->
        <property name="flushExpireAfterOperation" value="${flush.expire.after.operation}"/>
    </bean>

    <!--授权认证配置 end-->

    <!-- 文件上传配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <property name="maxUploadSize">
            <value>1048576000</value><!-- 总上传文件大小限制为1G，31*1024*1024 -->
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

    <!-- 模板解析器  -->
    <bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
        <property name="cacheable" value="false" />
        <property name="characterEncoding" value="UTF-8"/>
    </bean>

    <bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
    </bean>

    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding"  value="UTF-8" />
    </bean>



    <!--swagger -->
    <mvc:default-servlet-handler />
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />
</beans>
